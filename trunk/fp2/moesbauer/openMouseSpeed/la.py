#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Mar  9 21:00:05 2010

import sys; sys.path.append('/usr/lib/root/')
from ROOT import gROOT, TCanvas, TLegend, TF1, TH1F, TGraph, TGraphErrors, TH1D
from math import pi, sqrt, exp
from array import array
from operator import div, mod
from collections import deque
import wx, serial, SerialConfigDialog, threading, time, os, glob, sys, string
import gobject, gtk, datetime,  wx, wx.grid



class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.tabsMain = wx.Notebook(self, -1, style=0)
        self.tabsMain_pane_3 = wx.Panel(self.tabsMain, -1)
        self.tabsMain_pane_2 = wx.Panel(self.tabsMain, -1)
        self.notebook_2_pane_1 = wx.Panel(self.tabsMain, -1)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(1, "Open", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(2, "Connect", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(3, "QuickConnect", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(4, "Quit", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(5, "About", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.menubar)
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(1, 0)
        self.label_2 = wx.StaticText(self.notebook_2_pane_1, -1, "Logging")
        self.label_3 = wx.StaticText(self.notebook_2_pane_1, -1, "Data Folder")
        self.txtDataFolder = wx.TextCtrl(self.notebook_2_pane_1, -1, "data/")
        self.chkBoxLogData = wx.CheckBox(self.notebook_2_pane_1, -1, "enabled")
        self.label_3_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Data File")
        self.txtDataFile = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.btnStart = wx.Button(self.notebook_2_pane_1, -1, "Start")
        self.btnStop = wx.Button(self.notebook_2_pane_1, -1, "Stop")
        self.static_line_1 = wx.StaticLine(self.notebook_2_pane_1, -1)
        self.txtData = wx.TextCtrl(self.notebook_2_pane_1, -1, "", style=wx.TE_MULTILINE)
        self.static_line_3 = wx.StaticLine(self.notebook_2_pane_1, -1)
        self.label_2_copy_copy_1 = wx.StaticText(self.tabsMain_pane_2, -1, "Histogramm")
        self.label_3_copy_1_copy_copy = wx.StaticText(self.tabsMain_pane_2, -1, "Number of Bins")
        self.txtHistoBins = wx.TextCtrl(self.tabsMain_pane_2, -1, "50")
        self.button_1_copy_copy_1 = wx.Button(self.tabsMain_pane_2, -1, "Fit")
        self.label_3_copy_1_copy_2 = wx.StaticText(self.tabsMain_pane_2, -1, "x Minimum")
        self.txtHistoMin = wx.TextCtrl(self.tabsMain_pane_2, -1, "")
        self.btnDrawHisto = wx.Button(self.tabsMain_pane_2, -1, "Draw")
        self.label_3_copy_copy_copy_1 = wx.StaticText(self.tabsMain_pane_2, -1, "x Maximum")
        self.txtHistoMax = wx.TextCtrl(self.tabsMain_pane_2, -1, "")
        self.static_line_7 = wx.StaticLine(self.tabsMain_pane_2, -1)
        self.label_2_copy_copy_copy = wx.StaticText(self.tabsMain_pane_2, -1, "Velocity")
        self.panel_1_copy = wx.Panel(self.tabsMain_pane_2, -1)
        self.panel_2_copy = wx.Panel(self.tabsMain_pane_2, -1)
        self.button_1_copy_copy_copy = wx.Button(self.tabsMain_pane_2, -1, "Fit")
        self.label_3_copy_1_copy_1_copy = wx.StaticText(self.tabsMain_pane_2, -1, "x Minimum")
        self.txtVelMin = wx.TextCtrl(self.tabsMain_pane_2, -1, "0")
        self.btnDrawVel = wx.Button(self.tabsMain_pane_2, -1, "Draw")
        self.label_3_copy_copy_copy_copy = wx.StaticText(self.tabsMain_pane_2, -1, "x Maximum")
        self.txtVelMax = wx.TextCtrl(self.tabsMain_pane_2, -1, "")
        self.static_line_8 = wx.StaticLine(self.tabsMain_pane_2, -1)
        self.label_2_copy_copy_1_copy = wx.StaticText(self.tabsMain_pane_2, -1, "Calibration")
        self.label_3_copy_1_copy_copy_copy = wx.StaticText(self.tabsMain_pane_2, -1, "Number of Bins")
        self.txtCalibrationBins = wx.TextCtrl(self.tabsMain_pane_2, -1, "30")
        self.button_1_copy_copy_1_copy = wx.Button(self.tabsMain_pane_2, -1, "Fit")
        self.label_3_copy_1_copy_2_copy = wx.StaticText(self.tabsMain_pane_2, -1, "x Minimum")
        self.txtCalibrationMin = wx.TextCtrl(self.tabsMain_pane_2, -1, "")
        self.btnDrawCalibration = wx.Button(self.tabsMain_pane_2, -1, "Draw")
        self.label_3_copy_copy_copy_1_copy = wx.StaticText(self.tabsMain_pane_2, -1, "x Maximum")
        self.txtCalibrationMax = wx.TextCtrl(self.tabsMain_pane_2, -1, "")
        self.label_5 = wx.StaticText(self.tabsMain_pane_3, -1, "\nThis is an attempt to Calibrate the Sensor.\nTo do so you must Press Start, move the Sensor \nthe give Distance and Press stop again.\nThe more often you do the better the \nError can be calculated", style=wx.ALIGN_CENTRE)
        self.label_4 = wx.StaticText(self.tabsMain_pane_3, -1, "Distance [mm]")
        self.txtCalDistance = wx.TextCtrl(self.tabsMain_pane_3, -1, "")
        self.static_line_10 = wx.StaticLine(self.tabsMain_pane_3, -1)
        self.btnStartCal = wx.Button(self.tabsMain_pane_3, -1, "Start")
        self.btnTestCal = wx.Button(self.tabsMain_pane_3, -1, "Test")
        self.btnStopCal = wx.Button(self.tabsMain_pane_3, -1, "Stop")
        self.btnSaveCal = wx.Button(self.tabsMain_pane_3, -1, "Save")
        self.btnCalculate = wx.Button(self.tabsMain_pane_3, -1, "Calculate")
        self.btnHelp = wx.Button(self.tabsMain_pane_3, -1, "Help")
        self.static_line_11 = wx.StaticLine(self.tabsMain_pane_3, -1)
        self.txtCalData = wx.TextCtrl(self.tabsMain_pane_3, -1, "", style=wx.TE_MULTILINE)
        self.txtDebug = wx.TextCtrl(self, -1, "Open Mouse Speed - Use a Mouse Sensor to meassure low Speeds", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnMenuOpen, id=1)
        self.Bind(wx.EVT_MENU, self.OnMenuConnect, id=2)
        self.Bind(wx.EVT_MENU, self.OnMenuQuickConnect, id=3)
        self.Bind(wx.EVT_MENU, self.OnMenuQuit, id=4)
        self.Bind(wx.EVT_MENU, self.OnMenuAbout, id=5)
        self.Bind(wx.EVT_BUTTON, self.OnStartData, self.btnStart)
        self.Bind(wx.EVT_BUTTON, self.OnStopData, self.btnStop)
        self.Bind(wx.EVT_BUTTON, self.OnFitHisto, self.button_1_copy_copy_1)
        self.Bind(wx.EVT_BUTTON, self.OnDrawHisto, self.btnDrawHisto)
        self.Bind(wx.EVT_BUTTON, self.OnFitVel, self.button_1_copy_copy_copy)
        self.Bind(wx.EVT_BUTTON, self.OnDrawVel, self.btnDrawVel)
        self.Bind(wx.EVT_BUTTON, self.OnFitHisto, self.button_1_copy_copy_1_copy)
        self.Bind(wx.EVT_BUTTON, self.OnDrawCalibration, self.btnDrawCalibration)
        self.Bind(wx.EVT_BUTTON, self.OnStartCal, self.btnStartCal)
        self.Bind(wx.EVT_BUTTON, self.OnTestCal, self.btnTestCal)
        self.Bind(wx.EVT_BUTTON, self.OnStopCal, self.btnStopCal)
        self.Bind(wx.EVT_BUTTON, self.OnSaveCal, self.btnSaveCal)
        self.Bind(wx.EVT_BUTTON, self.OnCalculateCal, self.btnCalculate)
        self.Bind(wx.EVT_BUTTON, self.OnHelpCal, self.btnHelp)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        # end wxGlade
        self.InitVariables()

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("openMouseSpeed")
        self.SetSize((435, 600))
        self.statusbar.SetStatusWidths([-1])
        # statusbar fields
        statusbar_fields = ["Welcome to openMouseSpeed 0.1a"]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.label_2.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.chkBoxLogData.SetValue(1)
        self.txtData.SetMinSize((384, 100))
        self.label_2_copy_copy_1.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_1_copy_copy_1.Hide()
        self.label_2_copy_copy_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_1_copy_copy_copy.Hide()
        self.label_2_copy_copy_1_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_1_copy_copy_1_copy.Hide()
        self.label_4.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.txtCalData.SetMinSize((384, 100))
        # end wxGlade
        self.SetDisconnected()

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizerMain = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_14_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1_copy_copy_1_copy = wx.GridSizer(3, 3, 0, 0)
        grid_sizer_1_copy_copy_copy = wx.GridSizer(3, 3, 0, 0)
        grid_sizer_1_copy_copy_1 = wx.GridSizer(3, 3, 0, 0)
        sizerOne = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(3, 3, 0, 0)
        grid_sizer_1.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_3, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.txtDataFolder, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.chkBoxLogData, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_3_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.txtDataFile, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_16.Add(self.btnStart, 0, wx.ADJUST_MINSIZE, 0)
        sizer_15.Add(sizer_16, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_17.Add(self.btnStop, 0, wx.ADJUST_MINSIZE, 0)
        sizer_15.Add(sizer_17, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(sizer_15, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_1.Add(self.txtData, 0, wx.EXPAND, 0)
        sizer_1.Add(self.static_line_3, 0, wx.EXPAND, 0)
        sizerOne.Add(sizer_1, 1, wx.EXPAND, 0)
        self.notebook_2_pane_1.SetSizer(sizerOne)
        grid_sizer_1_copy_copy_1.Add(self.label_2_copy_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1_copy_copy_1.Add(self.label_3_copy_1_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1.Add(self.txtHistoBins, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1.Add(self.button_1_copy_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1.Add(self.label_3_copy_1_copy_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1.Add(self.txtHistoMin, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1.Add(self.btnDrawHisto, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1.Add(self.label_3_copy_copy_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1.Add(self.txtHistoMax, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(grid_sizer_1_copy_copy_1, 1, wx.EXPAND, 0)
        sizer_9.Add(self.static_line_7, 0, wx.EXPAND, 0)
        grid_sizer_1_copy_copy_copy.Add(self.label_2_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_copy.Add(self.panel_1_copy, 1, wx.EXPAND, 0)
        grid_sizer_1_copy_copy_copy.Add(self.panel_2_copy, 1, wx.EXPAND, 0)
        grid_sizer_1_copy_copy_copy.Add(self.button_1_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_copy.Add(self.label_3_copy_1_copy_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_copy.Add(self.txtVelMin, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_copy.Add(self.btnDrawVel, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_copy.Add(self.label_3_copy_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_copy.Add(self.txtVelMax, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(grid_sizer_1_copy_copy_copy, 1, wx.EXPAND, 0)
        sizer_9.Add(self.static_line_8, 0, wx.EXPAND, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.label_2_copy_copy_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.label_3_copy_1_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.txtCalibrationBins, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.button_1_copy_copy_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.label_3_copy_1_copy_2_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.txtCalibrationMin, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.btnDrawCalibration, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.label_3_copy_copy_copy_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy_1_copy.Add(self.txtCalibrationMax, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(grid_sizer_1_copy_copy_1_copy, 1, wx.EXPAND, 0)
        self.tabsMain_pane_2.SetSizer(sizer_9)
        sizer_11.Add(self.label_5, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.label_4, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.txtCalDistance, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(sizer_12, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 20)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_10.Add(self.static_line_10, 0, wx.EXPAND, 0)
        sizer_14.Add(self.btnStartCal, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.btnTestCal, 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add(sizer_14, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14_copy.Add(self.btnStopCal, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14_copy.Add(self.btnSaveCal, 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add(sizer_14_copy, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14_copy_1.Add(self.btnCalculate, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14_copy_1.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14_copy_1.Add(self.btnHelp, 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add(sizer_14_copy_1, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10.Add(sizer_13, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_10.Add(self.static_line_11, 0, wx.EXPAND, 0)
        sizer_10.Add(self.txtCalData, 0, wx.EXPAND, 0)
        self.tabsMain_pane_3.SetSizer(sizer_10)
        self.tabsMain.AddPage(self.notebook_2_pane_1, "Meassurement")
        self.tabsMain.AddPage(self.tabsMain_pane_2, "Analyze")
        self.tabsMain.AddPage(self.tabsMain_pane_3, "Calibrate")
        sizerMain.Add(self.tabsMain, 1, wx.EXPAND, 0)
        sizerMain.Add(self.txtDebug, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.SetSizer(sizerMain)
        self.Layout()
        self.SetSize((435, 600))
        # end wxGlade
    def InitVariables(self):
        self.ser = serial.Serial()
        self.alive = threading.Event()
        self.rawData = deque(['1','i','100','t','0','o','\n'])#sample data
        while (len(self.rawData) != 0):
            self.rawData.popleft()
        self.buffer = ""
        self.savedBuffer = ""
        self.vel = []
        self.time = []
        self.elapsedTime = 0
        self.count = 0
        self.tableCount = 0
        
        self.root = '/home/paule/fp-auswertung/fp2/moesbauer/openMouseSpeed/' # one specific folder
        os.chdir(self.root)
        self.file = open("data/init","w")
        self.file.close()
        self.pollData = 1

    def SetDisconnected(self):
        self.statusbar.SetStatusText("Welcome to OpenMouseSpeed")
        self.btnStart.Disable()
        self.btnStop.Disable()
        self.btnStartCal.Disable()
        self.btnCalculate.Disable()
        self.btnTestCal.Disable()
        self.btnSaveCal.Disable()
    
    def SetConnected(self):
        self.statusbar.SetStatusText("connected to %s with %i baud"%
            (self.ser.portstr, self.ser.baudrate))
        self.txtDebug.AppendText("\n[SERIAL] Succsess. We are connected.\n")
        self.btnStop.Enable()
        self.btnStartCal.Enable()
        self.btnCalculate.Enable()
        self.btnTestCal.Enable()
        self.btnSaveCal.Enable()
    def StartMainThread(self):      
        self.mainTread = threading.Thread(target=self.MainThread)
        self.mainTread.setDaemon(1)
        self.alive.set()
        self.mainTread.start()

    def StopMainThread(self):
        if self.mainTread is not None:
            self.alive.clear()          #clear alive event for thread
            self.mainTread.join()          #wait until thread has finished
            self.mainTread = None


    def drawHisto(self):
        #sorting Velocities for Histogram in channels
        bins = 0
        rangeMin = 0
        rangeMax = 0
        try:
            bins = int(self.txtHistoBins.GetValue())
            rangeMin = float(self.txtHistoMin.GetValue())
            rangeMax = float(self.txtHistoMax.GetValue())
        except ValueError:
            bins = 50
            rangeMin = min(self.vel)
            rangeMax = max(self.vel)      

        #drawing Histogramm
        h = TH1D('h', 'Histogramm of Velocities', bins, rangeMin, rangeMax)
        for value in self.vel:
            h.Fill(value)
        h.SetTitle(';Geschwindigkeit [];Häufigkeit [counts]')
        h.GetXaxis().SetTitle("Velocity");
        h.GetYaxis().SetTitle("Anzahl");
        lg = TLegend()
        self.histo = h
        ch = TCanvas('Histogramm of Velocities')
        self.histoCanvas = ch
        ch.SetGrid()
        self.histo.Draw('')
        ch.Update()
    
    def drawVel(self):
        rangeMin = 0
        rangeMax = 0
        scaledTime = []
        scaledVel = []
        self.count = len(self.time)        
        try:
            if (self.txtVelMin.GetValue() != ""):
                rangeMin = float(self.txtVelMin.GetValue())
            else : rangeMin = 0
            if (self.txtVelMax.GetValue() != ""):                
                rangeMax = float(self.tabsMain.txtVelMax.GetValue())
            else :rangeMax = max(self.time)
        except ValueError:
            rangeMin = 0
            rangeMax = max(self.time)
            self.txtDebug.AppendText("\n[Error] ValueError while converting User Input")
        for i in range(self.count):
            if (self.time[i] > rangeMin) & (self.time[i] < rangeMax):
                scaledTime.append(self.time[i])
                scaledVel.append(self.vel[i])
        g = TGraph(self.count, array('d',scaledTime) ,array('d',scaledVel))
        g.SetTitle(';Zeit t [ms];Geschwindigkeit []')
        g.GetHistogram().SetTitleOffset(1.3, 'Y')
        g.SetMarkerStyle(20)
        g.SetMarkerColor(2)
        g.SetMarkerSize(0.4)
        self.graph = g
        c = TCanvas('Velocity over Time')
        self.canvas = c
        c.SetGrid()
        self.graph.Draw('APX')
        #self.f.Draw('SAME')
        c.Update()
    def MainThread(self):
        """Thread that handles the incomming traffic. Does the basic input
           transformation (newlines) and generates an SerialRxEvent"""
        while self.alive.isSet():               #loop while alive event is true
            if self.pollData:
                n = self.ser.inWaiting()
		text = ""
                if n:
                    text = text + self.ser.read(n) #get it
                for byte in text:
                    self.rawData.append(byte)
                if (len(self.rawData) > 10):        #to be sure we have a full data set in buffer
                    byte  = self.rawData.popleft()
                    self.buffer += byte
                    if (byte == '\n'):
                        helpStr = ""
                        try :
                            interrupts = 0
                            for char in self.buffer:
                                if (char  == 'i')&(helpStr != ''):
                                    interrupts = int(helpStr.strip('iot'))
                                    helpStr = ""
                                    continue
                                if (char == "t")&(helpStr != ''):
                                    timer = int(helpStr.strip('tio'))
                                    helpStr = ""
                                    continue
                                if (char == "o")&(helpStr != ''):
                                    overflows = int(helpStr.strip('\n').strip('oti'))
                                    continue
                                helpStr += char
                            if (interrupts == 1):
                                time = (65535*overflows + timer)/16e3       #msec
                                self.elapsedTime += float(time/1e3)         #sec
                                self.vel.append(float(100/time))            #?
                                self.time.append(self.elapsedTime)
				self.txtData.AppendText("%.6e\t%.6e\n"%(self.elapsedTime, self.vel[-1]))
                                if self.chkBoxLogData.IsChecked():
                                    try:
                                        self.file.write("%.6e\t%.6e\n"%
                                            (self.elapsedTime, self.vel[-1]))
                                    except IOError:
                                        dlg = wx.MessageDialog(self, 
                                            "Could not write to Log File !!", 
                                            "OpenMouseSpeed 0.1a", 
                                            wx.OK | wx.ICON_INFORMATION)
                                        self.chkBoxLogData.SetValue(0)
                                        dlg.Show()
                                        dlg.Destroy()
                                self.buffer = ""
                        except ValueError:
                            self.txtDebug.AppendText("\n[Debug] ValueError " +
                                "while converting serial Data")
                            self.txtDebug.AppendText("\n[Debug]    --> helpStr was: %s"%(helpStr))

    def OnMenuOpen(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnMenuOpen' not implemented!")
        event.Skip()

    def OnMenuConnect(self, event): # wxGlade: MainFrame.<event_handler>
        dialog_serial_cfg = SerialConfigDialog.SerialConfigDialog(None, -1, "", serial=self.ser)
        result = dialog_serial_cfg.ShowModal()
        print result
        dialog_serial_cfg.Destroy()
        if (result == wx.ID_OK) :
            self.txtDebug.AppendText("\n[SERIAL] Trying to open Serial Port:\n")
            self.txtDebug.AppendText("   %s\n"%(str(self.ser)))
            try:
                self.ser.open()
            except serial.SerialException:
                self.SetDisconnected()
                dlg = wx.MessageDialog(None, str(e), "Serial Port Error", wx.OK | wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
            else:
                n = self.ser.inWaiting()
                self.txtDebug.AppendText("\n[SERIAL] Bytes in Buffer when opening: %i"%(n))
                if n:
                    text = self.ser.read(n)
                self.StartMainThread()
                self.SetConnected()
                if self.chkBoxLogData.IsChecked():
                    folder = self.txtDataFolder.GetValue()
                    if (self.txtDataFile.GetValue() == ""):
                        now = datetime.datetime.now()
                        filename = "%s%s.dat"%(str(now).split()[0], str(now).split()[1])
                        self.txtDataFile.SetValue(filename)
                    else :
                        filename = self.tabsMain.text_ctrl_2.GetValue()
                    try:
                        self.file = open('%s%s'%(folder, filename), 'w')
                        self.file.write("Time\tVelocity\n")
                    except IOError:
                        dlg = wx.MessageDialog(self, "Wrong Log File Name pls recheck!!", "OpenMouseSpeed 0.1a", wx.OK | wx.ICON_INFORMATION)
                        self.chkBoxLogData.SetValue(0)
                        dlg.Show()
                        dlg.Destroy()

    def OnMenuQuickConnect(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnMenuQuickConnect' not implemented!")
        event.Skip()

    def OnMenuQuit(self, event): # wxGlade: MainFrame.<event_handler>
        self.Close(1)
        event.Skip()

    def OnClose(self, event):
        #self.StopMainThread()
        self.ser.close()
        self.file.close()
        exit()
    def OnMenuAbout(self, event): # wxGlade: MainFrame.<event_handler>
        dlg = wx.MessageDialog(self, "   Open Mouse Speed\n Version 0.1 alpha \n"+
            "written by Paul Kremser", "OpenMouseSpeed 0.1a", wx.OK | wx.ICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()

    def OnStartData(self, event): # wxGlade: MainFrame.<event_handler>
        self.ser.open()
        self.txtDebug.AppendText("\n[DATA] Flushing Serial Buffer ...")
        n = self.ser.inWaiting()
        if n:
            self.ser.read(n)
        self.txtDebug.AppendText(" Starting Data Polling.")
        self.pollData = 1
        self.btnStart.Disable()
        self.btnStop.Enable()

    def OnStopData(self, event): # wxGlade: MainFrame.<event_handler>
        self.pollData = 0
        self.ser.close()
        self.txtDebug.AppendText("\n[DATA] Flushing Software Buffer ...")
        while (len(self.rawData)!= 0):
            self.rawData.popleft()
        self.txtDebug.AppendText(" Stopping Data Polling.")
        self.btnStart.Enable()
        self.btnStop.Disable()

    def OnFitHisto(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnFitHisto' not implemented!")
        event.Skip()

    def OnDrawHisto(self, event): # wxGlade: MainFrame.<event_handler>
        self.drawHisto()
    def OnFitVel(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnFitVel' not implemented!")
        event.Skip()

    def OnDrawVel(self, event): # wxGlade: MainFrame.<event_handler>
        self.drawVel()

    def OnDrawCalibration(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnDrawCalibration' not implemented!")
        event.Skip()

    def OnStartCal(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnStartCal' not implemented!")
        event.Skip()

    def OnTestCal(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnTestCal' not implemented!")
        event.Skip()

    def OnStopCal(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnStopCal' not implemented!")
        event.Skip()

    def OnSaveCal(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnSaveCal' not implemented!")
        event.Skip()

    def OnCalculateCal(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnCalculateCal' not implemented!")
        event.Skip()

    def OnHelpCal(self, event): # wxGlade: MainFrame.<event_handler>
        self.txtDebug.AppendText("\n[MISSING] Event handler `OnHelpCal' not implemented!")
        event.Skip()

# end of class MainFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    mainFrame = MainFrame(None, -1, "")
    app.SetTopWindow(mainFrame)
    mainFrame.Show()
    app.MainLoop()
