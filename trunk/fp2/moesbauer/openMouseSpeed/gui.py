#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Mar  8 21:19:21 2010
import sys; sys.path.append('/usr/lib/root/')
from ROOT import gROOT, TCanvas, TLegend, TF1, TH1F, TGraph, TGraphErrors, TH1D
import wx
import serial
import SerialConfigDialog
import threading
from collections import deque
import time
import os, glob, sys, string
import gobject
import gtk
from math import pi, sqrt, exp
from array import array
from operator import div, mod
import datetime

# begin wxGlade: extracode
# end wxGlade

class myNotebook(wx.Notebook):
    def __init__(self, *args, **kwds):
        # begin wxGlade: myNotebook.__init__
        kwds["style"] = 0
        wx.Notebook.__init__(self, *args, **kwds)
        self.notebook_2_pane_1 = wx.Panel(self, -1)
        self.label_2 = wx.StaticText(self.notebook_2_pane_1, -1, "Logging")
        self.label_3 = wx.StaticText(self.notebook_2_pane_1, -1, "Data Folder")
        self.text_ctrl_1 = wx.TextCtrl(self.notebook_2_pane_1, -1, "data/")
        self.checkbox_1 = wx.CheckBox(self.notebook_2_pane_1, -1, "enabled")
        self.label_3_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Data File")
        self.text_ctrl_2 = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.static_line_1 = wx.StaticLine(self.notebook_2_pane_1, -1)
        self.label_2_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Histogramm")
        self.label_3_copy_1_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Number of Bins")
        self.text_ctrl_1_copy_copy = wx.TextCtrl(self.notebook_2_pane_1, -1, "100")
        self.button_1_copy = wx.Button(self.notebook_2_pane_1, -1, "Fit")
        self.label_3_copy_1 = wx.StaticText(self.notebook_2_pane_1, -1, "x Minimum")
        self.text_ctrl_1_copy = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.button_1 = wx.Button(self.notebook_2_pane_1, -1, "Draw")
        self.label_3_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "x Maximum")
        self.text_ctrl_2_copy = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.static_line_2 = wx.StaticLine(self.notebook_2_pane_1, -1)
        self.label_2_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Velocity")
        self.panel_1 = wx.Panel(self.notebook_2_pane_1, -1)
        self.panel_2 = wx.Panel(self.notebook_2_pane_1, -1)
        self.button_1_copy_copy = wx.Button(self.notebook_2_pane_1, -1, "Fit")
        self.label_3_copy_1_copy_1 = wx.StaticText(self.notebook_2_pane_1, -1, "x Minimum")
        self.text_ctrl_1_copy_copy_1 = wx.TextCtrl(self.notebook_2_pane_1, -1, "0")
        self.button_1_copy_1 = wx.Button(self.notebook_2_pane_1, -1, "Draw")
        self.label_3_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "x Maximum")
        self.text_ctrl_2_copy_copy = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.static_line_3 = wx.StaticLine(self.notebook_2_pane_1, -1)
        self.txtArea = wx.TextCtrl(self.notebook_2_pane_1, -1, "Open Mouse Speed - Use a Mouse Sensor to meassure low Speeds", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnFitHisto, self.button_1_copy)
        self.Bind(wx.EVT_BUTTON, self.OnDrawHisto, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnFitVel, self.button_1_copy_copy)
        self.Bind(wx.EVT_BUTTON, self.OnDrawVel, self.button_1_copy_1)
        # end wxGlade
        self.drawHisto = 0
        self.drawVel = 0
        self.fitHisto = 0
        self.fitVel = 0 

    def __set_properties(self):
        # begin wxGlade: myNotebook.__set_properties
        self.AddPage(self.notebook_2_pane_1, "Meassurement")
        self.label_2.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.checkbox_1.SetValue(1)
        self.label_2_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_2_copy_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: myNotebook.__do_layout
        sizerOne = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1_copy_copy = wx.GridSizer(3, 3, 0, 0)
        grid_sizer_1_copy = wx.GridSizer(3, 3, 0, 0)
        grid_sizer_1 = wx.GridSizer(3, 3, 0, 0)
        grid_sizer_1.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_3, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.checkbox_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_3_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_1.Add(self.static_line_1, 0, wx.EXPAND, 0)
        grid_sizer_1_copy.Add(self.label_2_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1_copy.Add(self.label_3_copy_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy.Add(self.text_ctrl_1_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy.Add(self.button_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy.Add(self.label_3_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy.Add(self.text_ctrl_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy.Add(self.label_3_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy.Add(self.text_ctrl_2_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(grid_sizer_1_copy, 1, wx.EXPAND, 0)
        sizer_1.Add(self.static_line_2, 0, wx.EXPAND, 0)
        grid_sizer_1_copy_copy.Add(self.label_2_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy.Add(self.panel_1, 1, wx.EXPAND, 0)
        grid_sizer_1_copy_copy.Add(self.panel_2, 1, wx.EXPAND, 0)
        grid_sizer_1_copy_copy.Add(self.button_1_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy.Add(self.label_3_copy_1_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy.Add(self.text_ctrl_1_copy_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy.Add(self.button_1_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy.Add(self.label_3_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_1_copy_copy.Add(self.text_ctrl_2_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(grid_sizer_1_copy_copy, 1, wx.EXPAND, 0)
        sizer_1.Add(self.static_line_3, 0, wx.EXPAND, 0)
        sizerOne.Add(sizer_1, 1, wx.EXPAND, 0)
        sizerOne.Add(self.txtArea, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.notebook_2_pane_1.SetSizer(sizerOne)
        # end wxGlade

    def OnDrawHisto(self, event): # wxGlade: myNotebook.<event_handler>
        self.drawHisto = 1

    def OnDrawVel(self, event): # wxGlade: myNotebook.<event_handler>
        self.drawVel = 1
        
    def OnFitHisto(self, event): # wxGlade: myNotebook.<event_handler>
        self.fitHisto = 1
        self.drawHisto = 1        

    def OnFitVel(self, event): # wxGlade: myNotebook.<event_handler>
        self.fitVel = 1
        self.drawVel = 1 
# end of class myNotebook


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(1, "Settings", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(2, "Connect", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(3, "Quit", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(4, "About", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.menubar)
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(2, 0)
        self.tabsMain = myNotebook(self, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.menuSetiingsHandler, id=1)
        self.Bind(wx.EVT_MENU, self.menuConnectHandler, id=2)
        self.Bind(wx.EVT_MENU, self.menuQuitHandler, id=3)
        self.Bind(wx.EVT_MENU, self.menuAboutHandler, id=4)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        # end wxGlade
        
        
        self.ser = serial.Serial()
        self.serAlive = threading.Event()
        self.rawData = deque(['1','i','100','t','0','o','\n'])#sample data
        while (len(self.rawData) != 0):
            self.rawData.popleft()
        self.buffer = ""
        self.saved_buffer = ""
        self.vel = []
        self.time = []
        self.elapsedTime = 0
        self.count = 0
        self.root = '/home/paule/fp-auswertung/fp2/moesbauer/openMouseSpeed/' # one specific folder
        os.chdir(self.root)
        self.file = open("data/init","w")
        self.file.close()


    def drawHisto(self):
        #sorting Velocities for Histogram in channels
        bins = 0
        rangeMin = 0
        rangeMax = 0
        try:
            bins = int(self.tabsMain.text_ctrl_1_copy_copy.GetValue())
            rangeMin = float(self.tabsMain.text_ctrl_1_copy.GetValue())
            rangeMax = float(self.tabsMain.text_ctrl_2_copy.GetValue())
        except ValueError:
            bins = 50
            rangeMin = min(self.vel)
            rangeMax = max(self.vel)      

        #drawing Histogramm
        h = TH1D('h', 'Histogramm of Velocities', bins, rangeMin, rangeMax)
        for value in self.vel:
            h.Fill(value)
        h.SetTitle(';Geschwindigkeit [];Häufigkeit [counts]')
        h.GetXaxis().SetTitle("Velocity");
        h.GetYaxis().SetTitle("Anzahl");
        lg = TLegend()
        self.histo = h
        ch = TCanvas('Histogramm of Velocities')
        self.histoCanvas = ch
        ch.SetGrid()
        self.histo.Draw('')
        ch.Update()
    
    def drawVel(self):
        rangeMin = 0
        rangeMax = 0
        scaledTime = []
        scaledVel = []
        self.count = len(self.time)        
        try:
            if (self.tabsMain.text_ctrl_1_copy_copy_1.GetValue() != ""):
                rangeMin = float(self.tabsMain.text_ctrl_1_copy_copy_1.GetValue())
            else : rangeMin = 0
            if (self.tabsMain.text_ctrl_2_copy_copy.GetValue() != ""):                
                rangeMax = float(self.tabsMain.text_ctrl_2_copy_copy.GetValue())
            else :rangeMax = max(self.time)
        except ValueError:
            rangeMin = 0
            rangeMax = max(self.time)
            print "[Error] ValueError while converting User Input" 
        for i in range(self.count):
            if (self.time[i] > rangeMin) & (self.time[i] < rangeMax):
                scaledTime.append(self.time[i])
                scaledVel.append(self.vel[i])
        g = TGraph(self.count, array('d',scaledTime) ,array('d',scaledVel))
        g.SetTitle(';Zeit t [ms];Geschwindigkeit []')
        g.GetHistogram().SetTitleOffset(1.3, 'Y')
        g.SetMarkerStyle(20)
        g.SetMarkerColor(2)
        g.SetMarkerSize(0.4)
        self.graph = g
        c = TCanvas('Velocity over Time')
        self.canvas = c
        c.SetGrid()
        self.graph.Draw('APX')
        #self.f.Draw('SAME')
        c.Update()
        
        
        
    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("openMouseSpeed")
        self.SetSize((375, 540))
        self.statusbar.SetStatusWidths([-1, 100])
        # statusbar fields
        # statusbar fields
        statusbar_fields = ["Welcome to openMouseSpeed 0.1a"]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizerMain = wx.BoxSizer(wx.VERTICAL)
        sizerMain.Add(self.tabsMain, 1, wx.EXPAND, 0)
        self.SetSizer(sizerMain)
        self.Layout()
        self.SetSize((375, 540))        # end wxGlade
        
    
    def StartComPortThread(self):      
        self.serThread = threading.Thread(target=self.ComPortThread)
        self.serThread.setDaemon(1)
        self.serAlive.set()
        self.serThread.start()

    def StopComPortThread(self):
        if self.serThread is not None:
            self.serAlive.clear()          #clear alive event for thread
            self.serThread.join()          #wait until thread has finished
            self.serThread = None

    def menuSetiingsHandler(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `menuSetiingsHandler' not implemented!"
        event.Skip()

    def menuConnectHandler(self, event): # wxGlade: MainFrame.<event_handler>
        dialog_serial_cfg = SerialConfigDialog.SerialConfigDialog(None, -1, "", serial=self.ser)
        result = dialog_serial_cfg.ShowModal()
        dialog_serial_cfg.Destroy()
        if (result == wx.ID_OK) :
            try:
                self.ser.open()
            except serial.SerialException:
                self.statusbar.SetStatusText("Welcome to OpenMouseSpeed")
                dlg = wx.MessageDialog(None, str(e), "Serial Port Error", wx.OK | wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
            else:
                text = self.ser.read(1)
                while (text != '\n'):
                    text = self.ser.read(1)
                self.StartComPortThread()
                self.statusbar.SetStatusText("connected to %s with %i baud"%
                    (self.ser.portstr, self.ser.baudrate))
                if self.tabsMain.checkbox_1.IsChecked():
                    folder = self.tabsMain.text_ctrl_1.GetValue()
                    if (self.tabsMain.text_ctrl_2.GetValue() == ""):
                        now = datetime.datetime.now()
                        filename = "%s%s.dat"%(str(now).split()[0], str(now).split()[1])
                        self.tabsMain.text_ctrl_2.SetValue(filename)
                    else :
                        filename = self.tabsMain.text_ctrl_2.GetValue()
                    try:
                        self.file = open('%s%s'%(folder, filename), 'w')
                        self.file.write("Time\tVelocity\n")
                    except IOError:
                        dlg = wx.MessageDialog(self, "Wrong Log File Name pls recheck!!", "OpenMouseSpeed 0.1a", wx.OK | wx.ICON_INFORMATION)
                        self.tabsMain.checkbox_1.SetValue(0)
                        dlg.Show()
                        dlg.Destroy()


        event.Skip()

    def menuQuitHandler(self, event): # wxGlade: MainFrame.<event_handler>
        self.Close(1)
        event.Skip()

    
    def OnClose(self, event):
        #self.StopComPortThread()
        self.ser.close()
        self.file.close()
        exit()

    def menuAboutHandler(self, event): # wxGlade: MainFrame.<event_handler>
        dlg = wx.MessageDialog(self, "   Open Mouse Speed\n Version 0.1 alpha \n"+
            "written by Paul Kremser", "OpenMouseSpeed 0.1a", wx.OK | wx.ICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()

    def ComPortThread(self):
        """Thread that handles the incomming traffic. Does the basic input
           transformation (newlines) and generates an SerialRxEvent"""
        while self.serAlive.isSet():               #loop while alive event is true
            if (self.tabsMain.drawHisto):
                if (self.tabsMain.fitHisto): self.fitHisto()
                print "Drawing Histo ..."
                self.drawHisto()
                self.tabsMain.drawHisto = 0
                self.tabsMain.fitHisto = 0
            if (self.tabsMain.drawVel):
                print "Drawing Velocity ..."
                if (self.tabsMain.fitHisto): self.fitVel()
                self.drawVel()
                self.tabsMain.drawVel = 0
                self.tabsMain.fitVel = 0
            text = self.ser.read(1)          #read one, with timoutself.buffer.split('i')[0]
            if text:                            #check if not timeout
                n = self.ser.inWaiting()     #look if there is more to read
                if n:
                    text = text + self.ser.read(n) #get it
                for byte in text:
                    self.rawData.append(byte)
            if (len(self.rawData) != 0):
                byte  = self.rawData.popleft()
                self.buffer += byte
                if (byte == '\n'):
                    self.saved_buffer = self.buffer
                    str = ""
                    try :
                        for char in self.saved_buffer:
                            if (char  == 'i')&(str != ''):
                                interrupts = int(str.strip('iot'))
                                str = ""
                                continue
                            if (char == "t")&(str != ''):
                                timer = int(str.strip('tio'))
                                str = ""
                                continue
                            if (char == "o")&(str != ''):
                                overflows = int(str.strip('\n').strip('oti'))
                                continue
                            str += char
                    except ValueError:
                        print "[Error] ValueError while converting serial Data"
                    if (interrupts == 1):
                        time = (65535*overflows + timer)/16e3  #ms
                        self.elapsedTime += float(time)
                        self.vel.append(float(100/time))
                        self.time.append(self.elapsedTime)
                        self.tabsMain.txtArea.AppendText("Time: %.6e\tVelocity:%.6e\n"%(self.elapsedTime, self.vel[-1]))
                        if (self.tabsMain.checkbox_1.IsChecked()):
                            try:
                                self.file.write("%.6e\t%.6e\n"%(self.elapsedTime, self.vel[-1]))
                            except IOError:
                                dlg = wx.MessageDialog(self, "Could not write to Log File !!", "OpenMouseSpeed 0.1a", wx.OK | wx.ICON_INFORMATION)
                                self.tabsMain.checkbox_1.SetValue(0)
                                dlg.Show()
                                dlg.Destroy()
                    self.buffer = ""
# end of class MainFrame


class wxGladeApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        openMouseSpeed = MainFrame(None, -1, "")
        self.SetTopWindow(openMouseSpeed)
        openMouseSpeed.Show()
        return 1

# end of class wxGladeApp

if __name__ == "__main__":
    app = wxGladeApp(0)
    app.MainLoop()
